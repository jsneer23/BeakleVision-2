"""init migration

Revision ID: 75976f0a2d73
Revises: 
Create Date: 2025-07-18 10:07:59.803437

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision = '75976f0a2d73'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('team',
    sa.Column('number', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('rookie_year', sa.Integer(), nullable=True),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('state_prov', sa.Enum('AL', 'AK', 'AS', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'NL', 'PE', 'NS', 'NB', 'QC', 'ON', 'MB', 'SK', 'AB', 'BC', 'YT', 'NT', 'NU', 'NA', name='stateprov'), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('district', sa.Enum('FNC', 'FIT', 'FIN', 'FMA', 'CHS', 'FIM', 'FSC', 'PCH', 'PNW', 'ISR', 'ONT', 'NE', 'NA', name='district'), nullable=False),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('user',
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_table('yearstats',
    sa.Column('year', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('year')
    )
    op.create_table('event',
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('country', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('state_prov', sa.Enum('AL', 'AK', 'AS', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'DC', 'FL', 'GA', 'GU', 'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD', 'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ', 'NM', 'NY', 'NC', 'ND', 'MP', 'OH', 'OK', 'OR', 'PA', 'PR', 'RI', 'SC', 'SD', 'TN', 'TX', 'UT', 'VT', 'VI', 'VA', 'WA', 'WV', 'WI', 'WY', 'NL', 'PE', 'NS', 'NB', 'QC', 'ON', 'MB', 'SK', 'AB', 'BC', 'YT', 'NT', 'NU', 'NA', name='stateprov'), nullable=False),
    sa.Column('city', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('district', sa.Enum('FNC', 'FIT', 'FIN', 'FMA', 'CHS', 'FIM', 'FSC', 'PCH', 'PNW', 'ISR', 'ONT', 'NE', 'NA', name='district'), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('event_type', sa.Enum('INVALID', 'REGIONAL', 'DISTRICT', 'DISTRICT_CMP', 'CMP_DIV', 'EINSTEIN', 'DISTRICT_CMP_DIV', 'OFFSEASON', name='eventtype'), nullable=False),
    sa.Column('week', sa.Integer(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['year'], ['yearstats.year'], ),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('item',
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=True),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('owner_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['owner_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teamyearstats',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['key'], ['team.key'], ),
    sa.ForeignKeyConstraint(['year'], ['yearstats.year'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match',
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('event_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('match_type', sa.Enum('INVALID', 'QUAL', 'EIGHTH', 'QUARTER', 'SEMI', 'FINAL', name='matchtype'), nullable=False),
    sa.Column('set_number', sa.Integer(), nullable=False),
    sa.Column('match_number', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('UPCOMING', 'COMPLETED', name='matchstatus'), nullable=False),
    sa.Column('video', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('red_1', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('red_2', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('red_3', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('red_dq', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('red_surrogate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('blue_1', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('blue_2', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('blue_3', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('blue_dq', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('blue_surrogate', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('winner', sa.Enum('RED', 'BLUE', 'TIE', 'NOT_PLAYED', name='matchwinner'), nullable=True),
    sa.Column('time', sa.DateTime(), nullable=False),
    sa.Column('predicted_time', sa.Integer(), nullable=True),
    sa.Column('red_score', sa.Integer(), nullable=True),
    sa.Column('red_no_foul_points', sa.Integer(), nullable=True),
    sa.Column('red_foul_points', sa.Integer(), nullable=True),
    sa.Column('red_auto_points', sa.Integer(), nullable=True),
    sa.Column('red_teleop_points', sa.Integer(), nullable=True),
    sa.Column('red_endgame_points', sa.Integer(), nullable=True),
    sa.Column('red_endgame_1', sa.Integer(), nullable=True),
    sa.Column('red_endgame_2', sa.Integer(), nullable=True),
    sa.Column('red_endgame_3', sa.Integer(), nullable=True),
    sa.Column('red_rp_1', sa.Boolean(), nullable=True),
    sa.Column('red_rp_2', sa.Boolean(), nullable=True),
    sa.Column('red_rp_3', sa.Boolean(), nullable=True),
    sa.Column('red_comp_1', sa.Integer(), nullable=True),
    sa.Column('red_comp_2', sa.Integer(), nullable=True),
    sa.Column('red_comp_3', sa.Integer(), nullable=True),
    sa.Column('red_comp_4', sa.Integer(), nullable=True),
    sa.Column('red_comp_5', sa.Integer(), nullable=True),
    sa.Column('red_comp_6', sa.Integer(), nullable=True),
    sa.Column('red_comp_7', sa.Integer(), nullable=True),
    sa.Column('red_comp_8', sa.Integer(), nullable=True),
    sa.Column('red_comp_9', sa.Integer(), nullable=True),
    sa.Column('red_comp_10', sa.Integer(), nullable=True),
    sa.Column('red_comp_11', sa.Integer(), nullable=True),
    sa.Column('red_comp_12', sa.Integer(), nullable=True),
    sa.Column('red_comp_13', sa.Integer(), nullable=True),
    sa.Column('red_comp_14', sa.Integer(), nullable=True),
    sa.Column('red_comp_15', sa.Integer(), nullable=True),
    sa.Column('red_comp_16', sa.Integer(), nullable=True),
    sa.Column('red_comp_17', sa.Integer(), nullable=True),
    sa.Column('red_comp_18', sa.Integer(), nullable=True),
    sa.Column('blue_score', sa.Integer(), nullable=True),
    sa.Column('blue_no_foul_points', sa.Integer(), nullable=True),
    sa.Column('blue_foul_points', sa.Integer(), nullable=True),
    sa.Column('blue_auto_points', sa.Integer(), nullable=True),
    sa.Column('blue_teleop_points', sa.Integer(), nullable=True),
    sa.Column('blue_endgame_points', sa.Integer(), nullable=True),
    sa.Column('blue_endgame_1', sa.Integer(), nullable=True),
    sa.Column('blue_endgame_2', sa.Integer(), nullable=True),
    sa.Column('blue_endgame_3', sa.Integer(), nullable=True),
    sa.Column('blue_rp_1', sa.Boolean(), nullable=True),
    sa.Column('blue_rp_2', sa.Boolean(), nullable=True),
    sa.Column('blue_rp_3', sa.Boolean(), nullable=True),
    sa.Column('blue_comp_1', sa.Integer(), nullable=True),
    sa.Column('blue_comp_2', sa.Integer(), nullable=True),
    sa.Column('blue_comp_3', sa.Integer(), nullable=True),
    sa.Column('blue_comp_4', sa.Integer(), nullable=True),
    sa.Column('blue_comp_5', sa.Integer(), nullable=True),
    sa.Column('blue_comp_6', sa.Integer(), nullable=True),
    sa.Column('blue_comp_7', sa.Integer(), nullable=True),
    sa.Column('blue_comp_8', sa.Integer(), nullable=True),
    sa.Column('blue_comp_9', sa.Integer(), nullable=True),
    sa.Column('blue_comp_10', sa.Integer(), nullable=True),
    sa.Column('blue_comp_11', sa.Integer(), nullable=True),
    sa.Column('blue_comp_12', sa.Integer(), nullable=True),
    sa.Column('blue_comp_13', sa.Integer(), nullable=True),
    sa.Column('blue_comp_14', sa.Integer(), nullable=True),
    sa.Column('blue_comp_15', sa.Integer(), nullable=True),
    sa.Column('blue_comp_16', sa.Integer(), nullable=True),
    sa.Column('blue_comp_17', sa.Integer(), nullable=True),
    sa.Column('blue_comp_18', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['event_key'], ['event.key'], ),
    sa.ForeignKeyConstraint(['year'], ['yearstats.year'], ),
    sa.PrimaryKeyConstraint('key')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('match')
    op.drop_table('teamyearstats')
    op.drop_table('item')
    op.drop_table('event')
    op.drop_table('yearstats')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_table('team')
    # ### end Alembic commands ###
