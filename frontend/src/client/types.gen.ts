// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
  grant_type?: string | null
  username: string
  password: string
  scope?: string
  client_id?: string | null
  client_secret?: string | null
}

/**
 * An enumeration for FRC districts.
 */
export type District =
  | "North Carolina"
  | "Texas"
  | "Indiana"
  | "Mid-Atlantic"
  | "Chesapeake"
  | "Michigan"
  | "South Carolina"
  | "Peachtree"
  | "Pacific Northwest"
  | "Israel"
  | "Ontario"
  | "New England"
  | ""

/**
 * SQL table that holds event specific information from TBA.
 */
export type Event = {
  year: number
  key: string
  name: string
  country: string | null
  state_prov: StateProv
  city: string | null
  district: District
  start_date: string
  end_date: string
  event_type: EventType
  week: number
}

export type EventSearch = {
  name: string
  key: string
}

/**
 * An enumeration for event type.
 *
 * Members:
 * INVALID: The event is invalid for some reason.
 * REGIONAL: The event is a traditional regional event.
 * DISTRICT: The event is a district qualifying event.
 * DISTRICT_CMP: The event is a distict championship event.
 * CMP_DIV: The event is a division at the world championship.
 * EINSTEIN: The event is the Einstein final at world championship.
 * DISTRICT_CMP_DIV: The event is a district championship division.
 * OFFSEASON: The event is an offseason event.
 */
export type EventType = -1 | 0 | 1 | 2 | 3 | 4 | 5 | 99

export type HTTPValidationError = {
  detail?: Array<ValidationError>
}

export type ItemCreate = {
  title: string
  description?: string | null
}

export type ItemPublic = {
  title: string
  description?: string | null
  id: string
  owner_id: string
}

export type ItemsPublic = {
  data: Array<ItemPublic>
  count: number
}

export type ItemUpdate = {
  title?: string | null
  description?: string | null
}

export type Message = {
  message: string
}

export type NewPassword = {
  token: string
  new_password: string
}

export type PrivateUserCreate = {
  email: string
  password: string
  full_name: string
  is_verified?: boolean
}

export type SearchIndex = {
  events?: Array<EventSearch>
  teams?: Array<TeamSearch>
}

/**
 * An enumeration for US states and Canadian provinces.
 */
export type StateProv =
  | "Alabama"
  | "Alaska"
  | "American Samoa"
  | "Arizona"
  | "Arkansas"
  | "California"
  | "Colorado"
  | "Connecticut"
  | "Delaware"
  | "District of Columbia"
  | "Florida"
  | "Georgia"
  | "Guam"
  | "Hawaii"
  | "Idaho"
  | "Illinois"
  | "Indiana"
  | "Iowa"
  | "Kansas"
  | "Kentucky"
  | "Louisiana"
  | "Maine"
  | "Maryland"
  | "Massachusetts"
  | "Michigan"
  | "Minnesota"
  | "Mississippi"
  | "Missouri"
  | "Montana"
  | "Nebraska"
  | "Nevada"
  | "New Hampshire"
  | "New Jersey"
  | "New Mexico"
  | "New York"
  | "North Carolina"
  | "North Dakota"
  | "Northern Mariana Islands"
  | "Ohio"
  | "Oklahoma"
  | "Oregon"
  | "Pennsylvania"
  | "Puerto Rico"
  | "Rhode Island"
  | "South Carolina"
  | "South Dakota"
  | "Tennessee"
  | "Texas"
  | "Utah"
  | "Vermont"
  | "Virgin Islands"
  | "Virginia"
  | "Washington"
  | "West Virginia"
  | "Wisconsin"
  | "Wyoming"
  | "Newfoundland"
  | "Prince Edward Island"
  | "Nova Scotia"
  | "New Brunswick"
  | "Qu√©bec"
  | "Ontario"
  | "Manitoba"
  | "Saskatchewan"
  | "Alberta"
  | "British Columbia"
  | "Yukon"
  | "Northwest Territories"
  | "Nunavut"
  | ""

export type Team = {
  key: string
  number: number
  nickname: string
  rookie_year: number | null
  country: string | null
  state_prov: StateProv
  city: string | null
  district?: District
}

export type TeamSearch = {
  number: number
  nickname: string
}

export type Token = {
  access_token: string
  token_type?: string
}

export type UpdatePassword = {
  current_password: string
  new_password: string
}

export type UserCreate = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password: string
}

export type UserPublic = {
  email: string
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  id: string
}

export type UserRegister = {
  email: string
  password: string
  full_name?: string | null
}

export type UsersPublic = {
  data: Array<UserPublic>
  count: number
}

export type UserUpdate = {
  email?: string | null
  is_active?: boolean
  is_superuser?: boolean
  full_name?: string | null
  password?: string | null
}

export type UserUpdateMe = {
  full_name?: string | null
  email?: string | null
}

export type ValidationError = {
  loc: Array<string | number>
  msg: string
  type: string
}

export type EventEventData = {
  key: string
}

export type EventEventResponse = Event

export type ItemsReadItemsData = {
  limit?: number
  skip?: number
}

export type ItemsReadItemsResponse = ItemsPublic

export type ItemsCreateItemData = {
  requestBody: ItemCreate
}

export type ItemsCreateItemResponse = ItemPublic

export type ItemsReadItemData = {
  id: string
}

export type ItemsReadItemResponse = ItemPublic

export type ItemsUpdateItemData = {
  id: string
  requestBody: ItemUpdate
}

export type ItemsUpdateItemResponse = ItemPublic

export type ItemsDeleteItemData = {
  id: string
}

export type ItemsDeleteItemResponse = Message

export type LoginLoginAccessTokenData = {
  formData: Body_login_login_access_token
}

export type LoginLoginAccessTokenResponse = Token

export type LoginTestTokenResponse = UserPublic

export type LoginRecoverPasswordData = {
  email: string
}

export type LoginRecoverPasswordResponse = Message

export type LoginResetPasswordData = {
  requestBody: NewPassword
}

export type LoginResetPasswordResponse = Message

export type LoginRecoverPasswordHtmlContentData = {
  email: string
}

export type LoginRecoverPasswordHtmlContentResponse = string

export type PrivateCreateUserData = {
  requestBody: PrivateUserCreate
}

export type PrivateCreateUserResponse = UserPublic

export type TbaInitTeamsResponse = Message

export type TbaInitEventsData = {
  year: number
}

export type TbaInitEventsResponse = Message

export type TbaInitMatchesData = {
  year: number
}

export type TbaInitMatchesResponse = Message

export type TeamGetTeamByNumberData = {
  number: number
}

export type TeamGetTeamByNumberResponse = Team

export type UsersReadUsersData = {
  limit?: number
  skip?: number
}

export type UsersReadUsersResponse = UsersPublic

export type UsersCreateUserData = {
  requestBody: UserCreate
}

export type UsersCreateUserResponse = UserPublic

export type UsersReadUserMeResponse = UserPublic

export type UsersDeleteUserMeResponse = Message

export type UsersUpdateUserMeData = {
  requestBody: UserUpdateMe
}

export type UsersUpdateUserMeResponse = UserPublic

export type UsersUpdatePasswordMeData = {
  requestBody: UpdatePassword
}

export type UsersUpdatePasswordMeResponse = Message

export type UsersRegisterUserData = {
  requestBody: UserRegister
}

export type UsersRegisterUserResponse = UserPublic

export type UsersReadUserByIdData = {
  userId: string
}

export type UsersReadUserByIdResponse = UserPublic

export type UsersUpdateUserData = {
  requestBody: UserUpdate
  userId: string
}

export type UsersUpdateUserResponse = UserPublic

export type UsersDeleteUserData = {
  userId: string
}

export type UsersDeleteUserResponse = Message

export type UtilsSearchIndexResponse = SearchIndex

export type UtilsTestEmailData = {
  emailTo: string
}

export type UtilsTestEmailResponse = Message

export type UtilsHealthCheckResponse = boolean
